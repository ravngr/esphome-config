---

substitutions:
  # Device name and identifier (internal)
  device_name: external-front-door
  device_id: external_front_door

  # Friendly name for UI
  friendly_name: Front Door

  # IP address
  device_ip: !secret ip_frontdoor


packages:
  # Core
  core: !include packages/core_mqtt.yaml

  # Remote access
  web_server: !include packages/web_server.yaml

  # iBeacon
  ibeacon: !include
    file: packages/ibeacon.yaml
    vars:
      ibeacon_major: !secret ibeacon_major_external
      ibeacon_minor: !secret ibeacon_minor_external_frontdoor

  # Hardware specific
  hardware_base: !include packages/hardware/m5stack_atom/base.yaml
  hardware_status: !include packages/hardware/m5stack_atom/status.yaml
  hardware_identify: !include packages/hardware/m5stack_atom/identify.yaml


esphome:
  comment: "Front door lock interface"

  on_boot:
    - priority: 800
      then:
        - light.turn_on:
            id: ${device_id}_led
            brightness: 1.0
            color_brightness: 1.0
            red: 1.0
            green: 1.0
            blue: 0.0


external_components:
  - source: github://ravngr/esphome-components
    components:
      - yale


output:
  - platform: gpio
    id: wake_out
    pin: 22
    inverted: true


uart:
  id: uart_bus
  tx_pin: 25
  rx_pin: 21
  baud_rate: 19200


lock:
  - platform: yale
    id: door_lock
    name: "Lock"
    uart_id: uart_bus
    output: wake_out
    event:
      name: "Event"
    low_battery:
      name: "Low-Battery"
    on_lock:
      - light.turn_on: &led_lock
          id: ${device_id}_led
          brightness: 1.0
          color_brightness: 1.0
          red: 0.0
          green: 1.0
          blue: 0.0
          transition_length: 0s
    on_unlock:
      - light.turn_on: &led_unlock
          id: ${device_id}_led
          brightness: 1.0
          color_brightness: 1.0
          red: 1.0
          green: 0.0
          blue: 0.0
          transition_length: 0s


interval:
  # Force LED update periodically
  - interval: 60s
    then:
      - if:
          condition:
            lock.is_locked: door_lock
          then:
            - light.turn_on: *led_lock
          else:
            - light.turn_on: *led_unlock


binary_sensor:
  # Push button
  - id: !extend ${device_id}_button
    on_press:
      - then:
          - if:
              condition:
                lock.is_locked: door_lock
              then:
                - lock.unlock: door_lock
              else:
                - lock.lock: door_lock

  # Door sense
  # - id: door_sense
  #   name: "${friendly_name}"
  #   device_class: door
  #   platform: gpio
  #   pin:
  #     number: 19
  #     inverted: true
  #   filters:
  #     - delayed_on: 10ms
